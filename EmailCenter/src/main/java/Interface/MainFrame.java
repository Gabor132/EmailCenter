/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Converter.ByteSizes;
import Email.EmailSender;
import Database.DatabaseHandler;
import User.Accounts;
import User.Friends;
import User.Messages;
import User.Users;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.Calendar;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Dragos-Alexandru
 */
public class MainFrame extends javax.swing.JFrame {

    private static Users loggedInUser = null;
    
    private final Object loginSignal;
    private final String defaultAttachedFileLabel = "No file has been attached";
    private File attachedFile = null;
    
    private final Color IS_ATTACHED_COLOR = new Color(255, 0, 0);
    private final Color IS_NOT_ATTACHED_COLOR = new Color(0, 0, 255);
    
    /**
     * Creates new form MainFrame
     * @param loginSignal
     */
    public MainFrame(Object loginSignal) {
        initComponents();
        this.loginSignal = loginSignal;
        setupAccountBox();
    }
    
    public final void setupAccountBox(){
        List<Accounts> accounts = loggedInUser.getAccounts();
        this.accountBox.removeAllItems();
        for(Accounts aux:accounts){
            this.accountBox.addItem(aux.getEmailAddress());
        }
        setupFriendsList();
    }
    
    public final void setupFriendsList(){
        Accounts account = getSelectedAccount();
        DefaultListModel<String> friendsModel = new DefaultListModel<>();
        if(account != null){
            List<Friends> friends = account.getFriends();
            for(Friends aux:friends){
                friendsModel.addElement(aux.getEmailAddress());
            }
        }
        this.friendsList.setModel(friendsModel);
    }
    
    public static void setUser(Users newUser){
        loggedInUser = newUser;
    }
    
    public Accounts getSelectedAccount(){
        Accounts selectedAccount = null;
        List<Accounts> accounts = loggedInUser.getAccounts();
        for(Accounts aux:accounts){
            if(aux.getEmailAddress().equals((String)accountBox.getSelectedItem())){
                selectedAccount = aux;
                break;
            }
        }
        return selectedAccount;
    }
    
    public Friends getSelectedFriend(){
        Friends selectedFriend = null;
        List<Friends> friends = getSelectedAccount().getFriends();
        for(Friends aux:friends){
            if(aux.getEmailAddress().equals(friendsList.getSelectedValue())){
                selectedFriend = aux;
                break;
            }
        }
        return selectedFriend;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        friendsScroll = new javax.swing.JScrollPane();
        friendsList = new javax.swing.JList<>();
        emailContentScroll = new javax.swing.JScrollPane();
        messagesContentArea = new javax.swing.JEditorPane();
        subjectField = new javax.swing.JTextField();
        toField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        attachFileButton = new javax.swing.JButton();
        detachFileButton = new javax.swing.JButton();
        accountBox = new javax.swing.JComboBox<>();
        currentAccountLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        subjectLabel = new javax.swing.JLabel();
        addReceiverButton = new javax.swing.JButton();
        deleteFriendButton = new javax.swing.JButton();
        deleteAccountButton = new javax.swing.JButton();
        addAccountButton = new javax.swing.JButton();
        addFriendButton = new javax.swing.JButton();
        attachedFileLabel = new javax.swing.JLabel();
        friendsListLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        newMailMenu = new javax.swing.JMenu();
        historyMenu = new javax.swing.JMenu();
        signOutMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EmailCenter - "+loggedInUser.getUsername());
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        friendsScroll.setViewportView(friendsList);

        emailContentScroll.setViewportView(messagesContentArea);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        attachFileButton.setText("Attach File");
        attachFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachFileButtonActionPerformed(evt);
            }
        });

        detachFileButton.setText("Detach File");
        detachFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detachFileButtonActionPerformed(evt);
            }
        });

        accountBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountBoxActionPerformed(evt);
            }
        });

        currentAccountLabel.setText("Current account:");

        toLabel.setText("To:");

        subjectLabel.setText("Subject:");

        addReceiverButton.setText("Add Receiver");
        addReceiverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReceiverButtonActionPerformed(evt);
            }
        });

        deleteFriendButton.setText("Delete Friend");
        deleteFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFriendButtonActionPerformed(evt);
            }
        });

        deleteAccountButton.setText("Delete Account");
        deleteAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAccountButtonActionPerformed(evt);
            }
        });

        addAccountButton.setText("Add Account");
        addAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAccountButtonActionPerformed(evt);
            }
        });

        addFriendButton.setText("Add Friend");
        addFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFriendButtonActionPerformed(evt);
            }
        });

        attachedFileLabel.setForeground(IS_NOT_ATTACHED_COLOR);
        attachedFileLabel.setText("No file has been attached");

        friendsListLabel.setText("Friends list");

        newMailMenu.setText("New Email");
        newMailMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newMailMenuMouseClicked(evt);
            }
        });
        menuBar.add(newMailMenu);

        historyMenu.setText("View History");
        historyMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyMenuMouseClicked(evt);
            }
        });
        menuBar.add(historyMenu);

        signOutMenu.setText("Sign out");
        signOutMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signOutMenuMouseClicked(evt);
            }
        });
        menuBar.add(signOutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attachFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detachFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attachedFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addFriendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteFriendButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(currentAccountLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(accountBox, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addAccountButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(toLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(toField, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(subjectLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(subjectField, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteAccountButton, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(addReceiverButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(emailContentScroll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(friendsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(friendsListLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentAccountLabel)
                    .addComponent(deleteAccountButton)
                    .addComponent(addAccountButton)
                    .addComponent(friendsListLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toLabel)
                            .addComponent(addReceiverButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subjectField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subjectLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(emailContentScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(deleteFriendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addFriendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(attachFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(detachFileButton)
                                .addComponent(attachedFileLabel))))
                    .addComponent(friendsScroll))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFriendButtonActionPerformed
        Friends toBeDeleted = getSelectedFriend();
        if(toBeDeleted == null){
            JOptionPane.showMessageDialog(null, "You must select a friend for deletion",
                    "Delete Friend", JOptionPane.INFORMATION_MESSAGE);
            return ;
        }
        Accounts account = toBeDeleted.getAccount();
        if(toBeDeleted.deleteFriendFromDatabase()){
            account.deleteFriend(toBeDeleted);
            JOptionPane.showMessageDialog(null, "Succesfully deleted friend",
                    "Delete Friend", JOptionPane.INFORMATION_MESSAGE);
            setupFriendsList();
        }
    }//GEN-LAST:event_deleteFriendButtonActionPerformed

    private void addAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAccountButtonActionPerformed
        AddAccountDialog addDialog = new AddAccountDialog(this, true, loggedInUser);
        addDialog.setVisible(true);
        setupAccountBox();
    }//GEN-LAST:event_addAccountButtonActionPerformed

    private void deleteAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAccountButtonActionPerformed
        Accounts toBeDeleted = getSelectedAccount();
        if(toBeDeleted == null){
            JOptionPane.showMessageDialog(null, "You must select and account for deletion",
                    "Delete Account", JOptionPane.INFORMATION_MESSAGE);
            return ;
        }
        if(toBeDeleted.deleteAccountFromDatabase()){
            loggedInUser.deleteAccount(toBeDeleted);
            JOptionPane.showMessageDialog(null, "Succesfully deleted account",
                    "Delete Account", JOptionPane.INFORMATION_MESSAGE);
            setupAccountBox();
        }
    }//GEN-LAST:event_deleteAccountButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        Accounts selectedAccount = getSelectedAccount();
        if(selectedAccount == null){
            JOptionPane.showMessageDialog(null, "Please add an Account", "Send Email", JOptionPane.INFORMATION_MESSAGE);
            return ;
        }
        if(subjectField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please add a Subject", "Send Email", JOptionPane.INFORMATION_MESSAGE);
            return ;
        }
        if(toField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please add a receiver", "Send Email", JOptionPane.INFORMATION_MESSAGE);
            return ;
        }
        if(messagesContentArea.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please add some content", "Send Email", JOptionPane.INFORMATION_MESSAGE);
            return ;
        }
        
        String[] emails = toField.getText().split("; ");
        boolean[] succesfull = new boolean[emails.length];
        for(int i = 0; i < emails.length; i++){
            if(attachedFile == null){
                succesfull[i] = EmailSender.sendMessage(selectedAccount, subjectField.getText(),
                        emails[i], messagesContentArea.getText());
            }else{
                succesfull[i] = EmailSender.sendMessage(selectedAccount, subjectField.getText(),
                        emails[i], messagesContentArea.getText(), attachedFile);
            }
        }
        String failed = "";
        for(int i = 0; i < emails.length; i++){
            if(!succesfull[i]){
                failed += emails[i] + " ";
            }
        }
        if(failed.isEmpty()){
            JOptionPane.showMessageDialog(null, "Email was sent succesfully", "Send Email", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(null, "Email failed for " + failed,
                    "Send Email", JOptionPane.INFORMATION_MESSAGE);
        }
        List<Friends> friends = selectedAccount.getFriends();
        boolean[] friendExists = new boolean[emails.length];
        for(boolean auxB : friendExists){
            auxB = false;
        }
        for(Friends aux:friends){
            for(int i = 0; i < emails.length; i++){
                if(aux.getEmailAddress().equals(emails[i])){
                    friendExists[i] = true;
                    Messages newMessage;
                    if(attachedFile == null){
                        newMessage = new Messages(subjectField.getText(), 
                                messagesContentArea.getText(),
                                Calendar.getInstance().getTime().toString(),
                                null, null, aux);
                    }else{
                        newMessage = new Messages(subjectField.getText(), 
                            messagesContentArea.getText(),
                            Calendar.getInstance().getTime().toString(),
                            attachedFile.getName(), ByteSizes.getSize(attachedFile.length()), aux);
                    }
                    newMessage.addMessageToDatabase();
                    aux.addMessage(newMessage);
                }
            }
        }
        for(int i = 0; i < emails.length; i++){
            if(!friendExists[i]){
                Friends friend = new Friends(emails[i], selectedAccount);
                friend.addFriendInDatabase();
                friends.add(friend);
                Messages newMessage;
                if(attachedFile == null){
                    newMessage = new Messages(subjectField.getText(), 
                            messagesContentArea.getText(),
                            Calendar.getInstance().getTime().toString(),
                            null, null, friend);
                }else{
                    newMessage = new Messages(subjectField.getText(), 
                        messagesContentArea.getText(),
                        Calendar.getInstance().getTime().toString(),
                        attachedFile.getName(), ByteSizes.getSize(attachedFile.length()), friend);
                }
                newMessage.addMessageToDatabase();
                friend.addMessage(newMessage);
            }
        }
        setupFriendsList();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void addReceiverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReceiverButtonActionPerformed
        Friends friend = getSelectedFriend();
        if(friend == null){
            JOptionPane.showMessageDialog(null, "No friend selected",
                    "Send Email", JOptionPane.ERROR_MESSAGE);
            return ;
        }
        String toString = toField.getText();
        if(toString.contains(friend.getEmailAddress())){
            return;
        }
        if(toString.isEmpty()){
            toField.setText(friend.getEmailAddress());
        }else{
            toField.setText(toString+"; "+friend.getEmailAddress());
        }
    }//GEN-LAST:event_addReceiverButtonActionPerformed

    private void addFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFriendButtonActionPerformed
        Accounts selectedAccount = getSelectedAccount();
        if(selectedAccount == null){
            JOptionPane.showMessageDialog(null, "Select account", "Delete Friend", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        AddFriendDialog addDialog = new AddFriendDialog(this, true, selectedAccount);
        addDialog.setVisible(true);
        setupFriendsList();
    }//GEN-LAST:event_addFriendButtonActionPerformed

    private void signOutMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signOutMenuMouseClicked
        synchronized(loginSignal){
            loggedInUser = null;
            loginSignal.notify();
            this.dispose();
        }
    }//GEN-LAST:event_signOutMenuMouseClicked
    
    private void historyMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyMenuMouseClicked
        ViewHistoryFrame viewHistory = new ViewHistoryFrame(this, loggedInUser);
        this.setVisible(false);
    }//GEN-LAST:event_historyMenuMouseClicked

    private void accountBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountBoxActionPerformed
        setupFriendsList();
    }//GEN-LAST:event_accountBoxActionPerformed

    private void newMailMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newMailMenuMouseClicked
        toField.setText("");
        subjectField.setText("");
        messagesContentArea.setText("");
        setAttachment(null);
    }//GEN-LAST:event_newMailMenuMouseClicked

    private void attachFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachFileButtonActionPerformed
        JFileChooser attachmentChooser = new JFileChooser(new File(System.getProperty("user.home"), "Desktop"));
        attachmentChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int result = attachmentChooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            File desiredFile = attachmentChooser.getSelectedFile();
            System.out.println(ByteSizes.getSize(ByteSizes.ATTACMENT_LIMIT));
            if(desiredFile.length() < ByteSizes.ATTACMENT_LIMIT){
                setAttachment(desiredFile);
            }else{
                JOptionPane.showMessageDialog(null, "File is to big ("+ByteSizes.getSize(desiredFile.length())+"), must be smaller than 2 Mb",
                        "Attach file", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_attachFileButtonActionPerformed

    private void detachFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detachFileButtonActionPerformed
        setAttachment(null);
    }//GEN-LAST:event_detachFileButtonActionPerformed

    /**
     * Set's the given file as the attachment for the soon to be sent email
     * @param toAttach 
     * If toAttach is null, it detaches the current file
     */
    private void setAttachment(File toAttach){
        if(toAttach != null){
            attachedFile = toAttach;
            attachedFileLabel.setText(attachedFile.getName()+"("+ByteSizes.getSize(attachedFile.length())+")");
            attachedFileLabel.setForeground(IS_ATTACHED_COLOR);
        }else{
            attachedFile = null;
            attachedFileLabel.setText(defaultAttachedFileLabel);
            attachedFileLabel.setForeground(IS_NOT_ATTACHED_COLOR);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
        
        if(args.length > 0){
            if(args[0].equals(DatabaseHandler.REMOTE_CONFIG)){
                if(args.length > 1 && args[1].equals(DatabaseHandler.RESET_CONFIG)){
                    DatabaseHandler.getInstance(true, true);
                    return ;
                }
                DatabaseHandler.getInstance(true, false);
                return ;
            }else if(args[0].equals(DatabaseHandler.LOCAL_CONFIG)){
                if(args.length > 1 && args[1].equals(DatabaseHandler.RESET_CONFIG)){
                    DatabaseHandler.getInstance(false, true);
                    return ;
                }
                DatabaseHandler.getInstance(false, false);
                return ;
            }
        }
        
        while(true){
            Object loginSignal = new Object();
            EventQueue.invokeLater(() -> {
                LoginFrame login = new LoginFrame(loginSignal);
                login.setLocationRelativeTo(null);
                login.setVisible(true);
            });

            synchronized(loginSignal){
                try {
                    loginSignal.wait();
                } catch (InterruptedException ex) {
                    System.err.println("Failed: "+ ex.getMessage());
                }
            }

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(() -> {
                MainFrame frame = new MainFrame(loginSignal);
                frame.setLocationRelativeTo(null);
                frame.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        DatabaseHandler.getInstance(true, false).closeConnection();
                        super.windowClosing(e);
                    }
                });
                frame.setVisible(true);
            });
            
            synchronized(loginSignal){
                try {
                    loginSignal.wait();
                } catch (InterruptedException ex) {
                    System.err.println("Failed: "+ex);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> accountBox;
    private javax.swing.JButton addAccountButton;
    private javax.swing.JButton addFriendButton;
    private javax.swing.JButton addReceiverButton;
    private javax.swing.JButton attachFileButton;
    private javax.swing.JLabel attachedFileLabel;
    private javax.swing.JLabel currentAccountLabel;
    private javax.swing.JButton deleteAccountButton;
    private javax.swing.JButton deleteFriendButton;
    private javax.swing.JButton detachFileButton;
    private javax.swing.JScrollPane emailContentScroll;
    private javax.swing.JList<String> friendsList;
    private javax.swing.JLabel friendsListLabel;
    private javax.swing.JScrollPane friendsScroll;
    private javax.swing.JMenu historyMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JEditorPane messagesContentArea;
    private javax.swing.JMenu newMailMenu;
    private javax.swing.JButton sendButton;
    private javax.swing.JMenu signOutMenu;
    private javax.swing.JTextField subjectField;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JTextField toField;
    private javax.swing.JLabel toLabel;
    // End of variables declaration//GEN-END:variables
}
